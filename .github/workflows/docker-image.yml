name: Docker Image CI - Md to Html to PDF

on:
  push:
    branches:
      - master

jobs:
  build-nestjs:
    name: Build Back-End (NestJs)
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: nestjs

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Crear archivo .env
        run: |
          cat > apps/nestapi-service/.env <<EOL
          CORS_ORIGIN="${{secrets.CORS_ORIGIN}}"
          NODE_ENV="${{secrets.NODE_ENV}}"
          PORT="${{secrets.PORT}}"
          EOL

      - name: Construyendo contenedor NestJs
        run: docker compose -f apps/nestapi-service/docker-compose.build.yml build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Tag back-end image
        run: docker tag md-to-pdf-nest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-nest:latest

      - name: Push back-end image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-nest:latest

  build-fastapi:
    name: Build Back-End (FastApi)
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: fastapi

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Crear archivo .env
        run: |
          cat > apps/fastapi-service/.env <<EOL
          API_HTML_TO_PDF="${{secrets.API_HTML_TO_PDF}}"
          EOL
      - name: Construyendo contenedor FastApi
        run: docker compose -f apps/fastapi-service/docker-compose.build.yml build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Tag front-end image
        run: docker tag md-to-pdf-fastapi ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-fastapi:latest

      - name: Push front-end image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-fastapi:latest

  deploy-nestjs:
    name: Deploy Back-End (NestJs)
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-nestjs

    environment: nestjs

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-nest:latest

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f apps/nestapi-service/docker-compose.prod.yml up -d
      
      - name: Eliminar imágenes locales
        run: docker image prune -af || true

  deploy-fastapi:
    name: Deploy Back-End (FastApi)
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-fastapi

    environment: fastapi

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-fastapi:latest

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f apps/fastapi-service/docker-compose.prod.yml up -d
      
      - name: Eliminar imágenes locales
        run: docker image prune -af || true

  build-nextjs:
    name: Build Front-End (NextJs)
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: ["deploy-nestjs", "deploy-fastapi"]
    environment: next

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Crear archivo .env
        run: |
          cat > apps/next-app/.env <<EOL
          APP_BACK_END="${{secrets.APP_BACK_END}}"
          NEXT_PUBLIC_APP_BACK_END="${{secrets.NEXT_PUBLIC_APP_BACK_END}}"
          EOL

      - name: Construyendo contenedor NextJs
        run: docker compose -f apps/next-app/docker-compose.build.yml build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Tag front-end image
        run: docker tag md-to-pdf-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-app:latest

      - name: Push front-end image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-app:latest

  deploy-nextjs:
    name: Deploy Front-End (NextJs)
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-nextjs

    environment: next

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Descargar imagen desde ECR
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/md-html-to-pdf/md-to-pdf-app:latest

      - name: Crear y ejecutar contenedor en producción
        run: docker compose -f apps/next-app/docker-compose.prod.yml up -d
      
      - name: Eliminar imágenes locales
        run: docker image prune -af || true

  clean-ecr-images:
    name: Borrar imágenes antiguas de ECR
    runs-on: ubuntu-latest
    needs: [build-fastapi, build-nestjs]
    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Instalar jq
        run: sudo apt-get install -y jq

      - name: Borrar imágenes sin tag 'latest' - Frontend
        run: |
          REPO="md-html-to-pdf/md-to-pdf-app"

            # 1. Obtener todas las imágenes (excepto latest)
            aws ecr list-images --repository-name $REPO \
              --query 'imageIds[?type(imageTag)==`null` || imageTag!=`latest`]' \
              --output json > images.json

            # 2. Verificar si hay imágenes para borrar
            if [ $(jq -e 'length > 0' images.json) = "true" ]; then
              echo "Borrando $(jq length images.json) imágenes antiguas..."
              aws ecr batch-delete-image --repository-name $REPO --image-ids file://images.json
            else
              echo "No hay imágenes antiguas para borrar en $REPO"
            fi

      - name: Borrar imágenes sin tag 'latest' - Backend
        run: |
          REPO="md-html-to-pdf/md-to-pdf-nest"

            # 1. Obtener todas las imágenes (excepto latest)
            aws ecr list-images --repository-name $REPO \
              --query 'imageIds[?type(imageTag)==`null` || imageTag!=`latest`]' \
              --output json > images.json

            # 2. Verificar si hay imágenes para borrar
            if [ $(jq -e 'length > 0' images.json) = "true" ]; then
              echo "Borrando $(jq length images.json) imágenes antiguas..."
              aws ecr batch-delete-image --repository-name $REPO --image-ids file://images.json
            else
              echo "No hay imágenes antiguas para borrar en $REPO"
            fi
      - name: Borrar imágenes sin tag 'latest' - Backend
        run: |
          REPO="md-html-to-pdf/md-to-pdf-fastapi"

            # 1. Obtener todas las imágenes (excepto latest)
            aws ecr list-images --repository-name $REPO \
              --query 'imageIds[?type(imageTag)==`null` || imageTag!=`latest`]' \
              --output json > images.json

            # 2. Verificar si hay imágenes para borrar
            if [ $(jq -e 'length > 0' images.json) = "true" ]; then
              echo "Borrando $(jq length images.json) imágenes antiguas..."
              aws ecr batch-delete-image --repository-name $REPO --image-ids file://images.json
            else
              echo "No hay imágenes antiguas para borrar en $REPO"
            fi
  